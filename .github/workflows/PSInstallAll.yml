# This is a basic workflow to help you get started with Actions

name: PSInstallAll

# Controls when the action will run.
# Allows you to run this workflow manually from the Actions tab and VS Code
on:
  # Allows you to run this workflow manually from the Actions tab and VS Code
  workflow_dispatch:

  # Allows you to run this workflow manually from VS Code
  repository_dispatch:
    types: [ psinstallall ]

jobs:
  PSInstallSentinel:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Sentinel on Client Tenant
        shell: pwsh
        env:
          AZURE_USER: ${{secrets.AZURE_USER}}
          AZURE_PWD: ${{secrets.AZURE_PWD}}
        run: |
              Scripts/InstallSentinel.ps1 -OnboardingFile Onboard\onboarding.json -Azure_User ${{ env.AZURE_USER }} -Azure_Pwd '${{ env.AZURE_PWD }}' -Outvariable issues
              $errors   = $issues.Where({$_.Severity -eq 'Error'})
              $warnings = $issues.Where({$_.Severity -eq 'Warning'})
              if ($errors) {
                  Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
              } else {
                  Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
              }

  PSCreateAnalyticsRules:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create Analytics Rules on Client Tenant
        shell: pwsh
        env:
          AZURE_USER: ${{secrets.AZURE_USER}}
          AZURE_PWD: ${{secrets.AZURE_PWD}}
        run: |
              Scripts/CreateAnalyticsRules.ps1 -OnboardingFile Onboard\onboarding.json -RulesFile AnalyticsRules\analytics-rules.json -Azure_User ${{ env.AZURE_USER }} -Azure_Pwd '${{ env.AZURE_PWD }}' -Outvariable issues
              $errors   = $issues.Where({$_.Severity -eq 'Error'})
              $warnings = $issues.Where({$_.Severity -eq 'Warning'})
              if ($errors) {
                  Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
              } else {
                  Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
              }

  PSCreateHuntingRules:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create Hunting Rules on Client Tenant
        shell: pwsh
        env:
          AZURE_USER: ${{secrets.AZURE_USER}}
          AZURE_PWD: ${{secrets.AZURE_PWD}}
        run: |
              Scripts/CreateHuntingRulesAPI.ps1 -OnboardingFile Onboard\onboarding.json -RulesFile HuntingRules\hunting-rules.json -Azure_User ${{ env.AZURE_USER }} -Azure_Pwd '${{ env.AZURE_PWD }}' -Outvariable issues
              $errors   = $issues.Where({$_.Severity -eq 'Error'})
              $warnings = $issues.Where({$_.Severity -eq 'Warning'})
              if ($errors) {
                  Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
              } else {
                  Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
              }

  PSCreateWorkbooks:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create Workbooks on Client Tenant
        shell: pwsh
        env:
          AZURE_USER: ${{secrets.AZURE_USER}}
          AZURE_PWD: ${{secrets.AZURE_PWD}}
        run: |
              Scripts/CreateWorkbooks.ps1 -OnboardingFile Onboard\onboarding.json -WorkbooksFolder Workbooks -Azure_User ${{ env.AZURE_USER }} -Azure_Pwd '${{ env.AZURE_PWD }}' -Outvariable issues
              $errors   = $issues.Where({$_.Severity -eq 'Error'})
              $warnings = $issues.Where({$_.Severity -eq 'Warning'})
              if ($errors) {
                  Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
              } else {
                  Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
              }

  PSCreatePlaybooks:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create Playbooks on Client Tenant
        shell: pwsh
        run: |
              Scripts/CreatePlaybooks.ps1 -OnboardingFile Onboard\onboarding.json -PlaybooksFolder Playbooks -PlaybooksParams ".\Playbooks\Playbooks.params" -Azure_ServiceAccount ${{ secrets.AZURE_SERVICEACCOUNT }} -Azure_User ${{ secrets.AZURE_USER }} -Azure_Pwd '${{ secrets.AZURE_PWD }}' -Jira_User ${{ secrets.JIRA_USER }} -Jira_Pwd '${{ secrets.JIRA_PWD }}' -Virustotal_Key ${{ secrets.VIRUSTOTAL_KEY }} -Outvariable issues
              $errors   = $issues.Where({$_.Severity -eq 'Error'})
              $warnings = $issues.Where({$_.Severity -eq 'Warning'})
              if ($errors) {
                  Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
              } else {
                  Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
              }